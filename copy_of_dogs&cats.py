# -*- coding: utf-8 -*-
"""Copy of Dogs&Cats

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zn28nUG5jjpt68JHKNObJIPCbvD8VtPF
"""

import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Activation, Dropout
from tensorflow.keras.preprocessing.image import load_img
import os
import cv2
import random

from google.colab import drive
drive.mount('/content/drive')

import zipfile
path_to_zip_file = '/content/drive/MyDrive/test1.zip'
with zipfile.ZipFile(path_to_zip_file, 'r') as zip_ref:
  zip_ref.extractall('.')

import zipfile
path_to_zip_file = '/content/drive/MyDrive/train.zip'
with zipfile.ZipFile(path_to_zip_file, 'r') as zip_ref:
  zip_ref.extractall('.')

Filename = os.listdir("train/")
categories = []
for filename in Filename:
  category = filename.split('.')[0]
  if category == 'dog':
    categories.append(1)
  else:
    categories.append(0)
df = pd.DataFrame({'file' : Filename, 'category' : categories})
df.head(20)

df.tail(20)

df['category'].value_counts()

sample = random.choice(Filename)
image = load_img("train/" + sample)
plt.imshow(image)
plt.show()

df['category'] = df['category'].replace({0 : 'cat', 1 :'dog'})

from sklearn.model_selection import train_test_split
df_train, df_valid = train_test_split(df, test_size = 0.2, random_state = 42)

df_train['category'].value_counts().plot.bar()

df_valid['category'].value_counts().plot.bar()

from keras.preprocessing.image import ImageDataGenerator
training_datagen = ImageDataGenerator(rescale = 1./255)
training_generator = training_datagen.flow_from_dataframe(df_train,
                                                          "train/",
                                                          x_col = 'file',
                                                          y_col = 'category',
                                                          target_size = (28, 28),
                                                          class_mode = 'categorical')

validation_datagen = ImageDataGenerator(rescale = 1./255)
validation_generator = validation_datagen.flow_from_dataframe(df_valid,
                                                              "train/",
                                                              x_col = 'file',
                                                              y_col = 'category',
                                                              target_size=(28,28),class_mode='categorical')

model = tf.keras.models.Sequential()
model.add(Conv2D(128, (3,3), activation = 'relu', input_shape = (28,28,3)))
model.add(MaxPooling2D(pool_size = 2, strides = 2))
model.add(BatchNormalization(axis=1))
model.add(Dropout(0.25))
model.add(Conv2D(64, (3,3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = 2 , strides = 2))
model.add(Flatten())
model.add(Dense(20, activation = 'relu' ))
model.add(Dense(10, activation = 'relu'))
model.add(Dense(2, activation = 'softmax'))

model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
model.summary()

history = model.fit_generator(training_generator, epochs= 20, steps_per_epoch = 200, validation_data = validation_generator)

